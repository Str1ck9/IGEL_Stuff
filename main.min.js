function debug(n) {
    return n ? (window.console = consoleHolder,
    "Debug enabled") : (consoleHolder = window.console,
    window.console = {},
    window.console.log = function() {}
    ,
    window.console.debug = function() {}
    ,
    window.console.timeStamp = function() {}
    ,
    "Debug disabled")
}
requirejs.config({
    baseUrl: "/WallboardFX/js/",
    paths: {
        apikey: "authentication/apikey",
        hub: "/realtime/wallboardfx/hubs?noext",
        timeline: "libs/timeline/timeline-min",
        datatables: "libs/datatables/jquery.dataTables.min",
        backbone: "libs/backbone/backbone",
        backbone_momento: "libs/backbone/backbone_momento",
        uniform: "libs/uniform/jquery.uniform.min",
        validation: "libs/jquery/jquery.validation",
        bigtext: "libs/jquery/jquery.bigtext",
        wizard: "libs/jquery/wizard",
        backbone_super: "libs/backbone/backbone_super",
        bootstrap: "libs/bootstrap/bootstrap.min",
        knockback: "libs/knockback/knockback",
        knockout: "libs/knockoutjs/knockout",
        editable: "libs/editable/knockout.editable",
        handlebars: "libs/handlebars/handlebars",
        moment: "libs/moment/moment",
        signage: "libs/signage/signage",
        underscore: "libs/underscore/underscore",
        mustache: "libs/mustache/mustache",
        select2: "libs/select2/select2.min",
        notify: "libs/notify/jquery.noty",
        ticker: "libs/ticker/jquery.ticker",
        tour: "libs/bootstrap/bootstrap-tour.min",
        gritter: "libs/gritter/jquery.gritter.min",
        gridster: "libs/gridster/jquery.gridster.min",
        colResizable: "libs/colResizable/colResizable-1.3.min",
        jquerymobile: "libs/jquerymobile/jquery.mobile-1.3.2.min",
        sortable: "libs/knockoutjs/knockout-sortable.min",
        knockoutbootstrap: "libs/knockoutjs/knockout-bootstrap.min",
        text: "libs/requirejs/plugins/text",
        eventie: "libs/eventie",
        "doc-ready": "libs/doc-ready",
        eventEmitter: "libs/eventEmitter",
        "get-style-property": "libs/get-style-property",
        "get-size": "libs/get-size",
        "matches-selector": "libs/matches-selector",
        outlayer: "libs/outlayer",
        masonry: "libs/masonry"
    },
    shim: {
        kb: {
            deps: ["underscore", "backbone", "knockout"],
            exports: "kb"
        },
        knockback: {
            deps: ["underscore", "backbone", "knockout"],
            exports: "kb"
        },
        knockout: {
            exports: "ko"
        },
        knockoutbootstrap: {
            deps: ["knockout"]
        },
        underscore: {
            exports: "_"
        },
        notify: {
            exports: "noty"
        },
        backbone: {
            deps: ["underscore"],
            exports: "Backbone"
        },
        editable: {
            deps: ["knockout", "libs/editable/bootstrap-editable"]
        },
        backbone_momento: {
            deps: ["underscore", "backbone"]
        },
        backbone_super: {
            deps: ["backbone"],
            exports: "_super"
        },
        handlebars: {
            exports: "Handlebars"
        },
        hub: {
            deps: ["libs/signalr/jquery.signalR-1.1.2.min"]
        },
        realtime: {
            deps: ["hub"],
            exports: "realtime"
        },
        sortable: {
            deps: ["libs/jquery/jquery-ui.min"]
        }
    }
});
requirejs.onError = function(n) {
    window.console.log(n.message, n);
    n.requireType === "timeout" && window.console.log("modules: " + n.requireModules)
}
;
define("jquery", [], function() {
    return $.ajaxSetup({
        cache: !1
    }),
    jQuery
});
$(document).bind("mobileinit", function() {
    $.mobile.ajaxEnabled = !1;
    $.mobile.linkBindingEnabled = !1;
    $.mobile.hashListeningEnabled = !1;
    $.mobile.pushStateEnabled = !1
});
var consoleHolder = window.console;
debug(!0);
$(document).ready(function() {
    window.appStarter()
});
/*
//# sourceMappingURL=main.min.js.map
*/
